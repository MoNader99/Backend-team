//library imports
const express= require('express');
const {ObjectID}=require("mongodb");  // if the id is autogenerated we have to use the ObjectID as it is not a string it is an objectid
var bodyParser= require('body-parser');

var{mongoose}= require("./../db/mongoose.js");  
var{track}=require("./../models/track.js");
var{User}= require("./../models/users.js"); // users model
var{playlist}= require("./../models/playlists.js"); // playlists model


var app=express();
//configures the middlewear
app.use(bodyParser.json());

app.delete('/playlists/tracks',(req,res)=>{
    var token = req.header('x-auth');
    User.findByToken(token).then((user)=>{
        if(!user){
            return Promise.reject();
        }
    var userId2=user._id;     // id of the owner of the playlist 
    if(!req.body.playlistName){
        return res.status(400).send("Pass the playlistname that you want to delete a track from");
    }
    if(!req.body.trackId){
        return res.status(400).send("Pass the track id that you want to delete");
    }
    var trackId= req.body.trackId
    if(!ObjectID.isValid(trackId)){
        return res.status(404).send("Invalid Track Id");   
    }

    var playlistName=req.body.playlistName;
    playlist.findOne({$and:[{userId:userId2},{playlistName:playlistName }]}).then((delPlaylist)=>{
        if(!delPlaylist){
            
            return res.status(404).send('Playlist not found');
        }
        
        playlist.findOne({$and:[{tracks:{$eq:trackId}},{playlistName:playlistName }]}).then((delTrack1)=>{
            if(!delTrack1){
                return res.status(400).send("Track is not in the playlist");
            }
            else{
                var tracksarr= delTrack1.tracks;
                for(var count=0 ; count<tracksarr.length;count++){
                    if(tracksarr[count]==trackId){
                        var temptrack=tracksarr[count];
                        for (var count2=count ; count2<tracksarr.length-1 ; count2++){
                            tracksarr[count2]=tracksarr[count2+1]
                        }
                       tracksarr.pop();
                    }
                }
                playlist.findOneAndUpdate({$and:[{userId:userId2},{playlistName:playlistName }]},{ $set: { tracks:tracksarr  } }).then((res)=>{
                    
                    
                });
                res.status(204).send("Track is successfully deleted from playlist");
                
            }

        });

    }).catch((e)=>{
        res.status(500).send("Could not remove the track from the playlist");
    })
    }).catch((e)=>{
        res.status(401).send('Unauthorized Access');
    })
});











app.listen(3000,()=>{
    console.log("Started on port 3000 lets");
});


