function cov_oc748n0td(){var path="G:\\SWbackend\\Integrated\\Backend-team\\db\\mongoose.js";var hash="d421a42984f345ebc2083d87349f66317eba6673";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"G:\\SWbackend\\Integrated\\Backend-team\\db\\mongoose.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:36}},"1":{start:{line:3,column:0},end:{line:3,column:34}},"2":{start:{line:6,column:0},end:{line:6,column:81}},"3":{start:{line:8,column:0},end:{line:8,column:37}},"4":{start:{line:9,column:0},end:{line:9,column:30}}},fnMap:{},branchMap:{"0":{loc:{start:{line:6,column:17},end:{line:6,column:79}},type:"binary-expr",locations:[{start:{line:6,column:17},end:{line:6,column:40}},{start:{line:6,column:44},end:{line:6,column:79}}],line:6}},s:{"0":0,"1":0,"2":0,"3":0,"4":0},f:{},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d421a42984f345ebc2083d87349f66317eba6673"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_oc748n0td=function(){return actualCoverage;};return actualCoverage;}cov_oc748n0td();const mongoose=(cov_oc748n0td().s[0]++,require("mongoose"));//tell mongoose which promise libray we want to use
cov_oc748n0td().s[1]++;mongoose.Promise=global.Promise;//connect to the database
//the connect method here doesnot need a call back fn the library here is more complex it will wait for the connection to happen first to avoid any errors
cov_oc748n0td().s[2]++;mongoose.connect((cov_oc748n0td().b[0][0]++,process.env.MONGODB_URI)||(cov_oc748n0td().b[0][1]++,'mongodb://localhost:27017/Spotify'));cov_oc748n0td().s[3]++;console.log(process.env.MONGODB_URI);cov_oc748n0td().s[4]++;module.exports={mongoose};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vbmdvb3NlLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsIlByb21pc2UiLCJnbG9iYWwiLCJjb25uZWN0IiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfVVJJIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiIwcUNBQUEsS0FBTUEsQ0FBQUEsUUFBUSx5QkFBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBVixDQUFkLENBQ0E7dUJBQ0FELFFBQVEsQ0FBQ0UsT0FBVCxDQUFtQkMsTUFBTSxDQUFDRCxPQUExQixDQUNBO0FBQ0E7dUJBQ0FGLFFBQVEsQ0FBQ0ksT0FBVCxDQUFpQiwyQkFBQUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFdBQVosOEJBQTJCLG1DQUEzQixDQUFqQixFLHVCQUVBQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUosT0FBTyxDQUFDQyxHQUFSLENBQVlDLFdBQXhCLEUsdUJBQ0FHLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQixDQUFFWCxRQUFGLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKFwibW9uZ29vc2VcIik7XHJcbi8vdGVsbCBtb25nb29zZSB3aGljaCBwcm9taXNlIGxpYnJheSB3ZSB3YW50IHRvIHVzZVxyXG5tb25nb29zZS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XHJcbi8vY29ubmVjdCB0byB0aGUgZGF0YWJhc2VcclxuLy90aGUgY29ubmVjdCBtZXRob2QgaGVyZSBkb2Vzbm90IG5lZWQgYSBjYWxsIGJhY2sgZm4gdGhlIGxpYnJhcnkgaGVyZSBpcyBtb3JlIGNvbXBsZXggaXQgd2lsbCB3YWl0IGZvciB0aGUgY29ubmVjdGlvbiB0byBoYXBwZW4gZmlyc3QgdG8gYXZvaWQgYW55IGVycm9yc1xyXG5tb25nb29zZS5jb25uZWN0KHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJIHx8ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L1Nwb3RpZnknKTtcclxuXHJcbmNvbnNvbGUubG9nKHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJKTtcclxubW9kdWxlLmV4cG9ydHMgPSB7IG1vbmdvb3NlIH07Il19